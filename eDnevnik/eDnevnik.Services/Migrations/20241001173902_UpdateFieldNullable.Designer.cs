// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eDnevnik.Services;

#nullable disable

namespace eDnevnik.Services.Migrations
{
    [DbContext(typeof(eDnevnikDBContext))]
    [Migration("20241001173902_UpdateFieldNullable")]
    partial class UpdateFieldNullable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("eDnevnik.Services.Database.Casovi", b =>
                {
                    b.Property<int>("CasoviID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CasoviID"), 1L, 1);

                    b.Property<DateTime?>("DatumOdrzavanjaCasa")
                        .HasColumnType("datetime2");

                    b.Property<int>("GodisnjiPlanProgramID")
                        .HasColumnType("int");

                    b.Property<bool>("IsOdrzan")
                        .HasColumnType("bit");

                    b.Property<string>("NazivCasa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CasoviID");

                    b.HasIndex("GodisnjiPlanProgramID");

                    b.ToTable("Casovi");

                    b.HasData(
                        new
                        {
                            CasoviID = 1,
                            GodisnjiPlanProgramID = 1,
                            IsOdrzan = false,
                            NazivCasa = "Algebra",
                            Opis = "Osnove algebre"
                        },
                        new
                        {
                            CasoviID = 2,
                            GodisnjiPlanProgramID = 1,
                            IsOdrzan = false,
                            NazivCasa = "Geometrija",
                            Opis = "Osnove geometrije"
                        },
                        new
                        {
                            CasoviID = 3,
                            GodisnjiPlanProgramID = 1,
                            IsOdrzan = false,
                            NazivCasa = "Trigonometrija",
                            Opis = "Osnove trigonometrije"
                        },
                        new
                        {
                            CasoviID = 4,
                            GodisnjiPlanProgramID = 1,
                            IsOdrzan = false,
                            NazivCasa = "Kalkulus",
                            Opis = "Osnove kalkulusa"
                        },
                        new
                        {
                            CasoviID = 5,
                            GodisnjiPlanProgramID = 1,
                            IsOdrzan = false,
                            NazivCasa = "Statistika",
                            Opis = "Osnove statistike"
                        },
                        new
                        {
                            CasoviID = 6,
                            GodisnjiPlanProgramID = 2,
                            IsOdrzan = false,
                            NazivCasa = "Mehanika",
                            Opis = "Osnove mehanike"
                        },
                        new
                        {
                            CasoviID = 7,
                            GodisnjiPlanProgramID = 2,
                            IsOdrzan = false,
                            NazivCasa = "Termodinamika",
                            Opis = "Osnove termodinamike"
                        },
                        new
                        {
                            CasoviID = 8,
                            GodisnjiPlanProgramID = 2,
                            IsOdrzan = false,
                            NazivCasa = "Optika",
                            Opis = "Osnove optike"
                        },
                        new
                        {
                            CasoviID = 9,
                            GodisnjiPlanProgramID = 2,
                            IsOdrzan = false,
                            NazivCasa = "Elektricitet",
                            Opis = "Osnove elektriciteta"
                        },
                        new
                        {
                            CasoviID = 10,
                            GodisnjiPlanProgramID = 2,
                            IsOdrzan = false,
                            NazivCasa = "Magnetizam",
                            Opis = "Osnove magnetizma"
                        },
                        new
                        {
                            CasoviID = 11,
                            GodisnjiPlanProgramID = 3,
                            IsOdrzan = false,
                            NazivCasa = "Organska hemija",
                            Opis = "Osnove organske hemije"
                        },
                        new
                        {
                            CasoviID = 12,
                            GodisnjiPlanProgramID = 3,
                            IsOdrzan = false,
                            NazivCasa = "Neorganska hemija",
                            Opis = "Osnove neorganske hemije"
                        },
                        new
                        {
                            CasoviID = 13,
                            GodisnjiPlanProgramID = 3,
                            IsOdrzan = false,
                            NazivCasa = "Fizička hemija",
                            Opis = "Osnove fizičke hemije"
                        },
                        new
                        {
                            CasoviID = 14,
                            GodisnjiPlanProgramID = 3,
                            IsOdrzan = false,
                            NazivCasa = "Analitička hemija",
                            Opis = "Osnove analitičke hemije"
                        },
                        new
                        {
                            CasoviID = 15,
                            GodisnjiPlanProgramID = 3,
                            IsOdrzan = false,
                            NazivCasa = "Biohemija",
                            Opis = "Osnove biohemije"
                        },
                        new
                        {
                            CasoviID = 16,
                            GodisnjiPlanProgramID = 4,
                            IsOdrzan = false,
                            NazivCasa = "Osnove programiranja",
                            Opis = "Osnove programiranja"
                        },
                        new
                        {
                            CasoviID = 17,
                            GodisnjiPlanProgramID = 4,
                            IsOdrzan = false,
                            NazivCasa = "Strukture podataka",
                            Opis = "Osnove struktura podataka"
                        },
                        new
                        {
                            CasoviID = 18,
                            GodisnjiPlanProgramID = 4,
                            IsOdrzan = false,
                            NazivCasa = "Algoritmi",
                            Opis = "Osnove algoritama"
                        },
                        new
                        {
                            CasoviID = 19,
                            GodisnjiPlanProgramID = 4,
                            IsOdrzan = false,
                            NazivCasa = "Baze podataka",
                            Opis = "Osnove baza podataka"
                        },
                        new
                        {
                            CasoviID = 20,
                            GodisnjiPlanProgramID = 4,
                            IsOdrzan = false,
                            NazivCasa = "Softverski inženjering",
                            Opis = "Osnove softverskog inženjeringa"
                        },
                        new
                        {
                            CasoviID = 21,
                            GodisnjiPlanProgramID = 5,
                            IsOdrzan = false,
                            NazivCasa = "Gramatika",
                            Opis = "Osnove engleske gramatike"
                        },
                        new
                        {
                            CasoviID = 22,
                            GodisnjiPlanProgramID = 5,
                            IsOdrzan = false,
                            NazivCasa = "Vokabular",
                            Opis = "Osnove engleskog vokabulara"
                        },
                        new
                        {
                            CasoviID = 23,
                            GodisnjiPlanProgramID = 5,
                            IsOdrzan = false,
                            NazivCasa = "Razumijevanje pročitanog",
                            Opis = "Razumijevanje pročitanog"
                        },
                        new
                        {
                            CasoviID = 24,
                            GodisnjiPlanProgramID = 5,
                            IsOdrzan = false,
                            NazivCasa = "Pisanje",
                            Opis = "Pisanje na engleskom"
                        },
                        new
                        {
                            CasoviID = 25,
                            GodisnjiPlanProgramID = 5,
                            IsOdrzan = false,
                            NazivCasa = "Govorne vještine",
                            Opis = "Govorne vještine na engleskom"
                        },
                        new
                        {
                            CasoviID = 26,
                            GodisnjiPlanProgramID = 6,
                            IsOdrzan = false,
                            NazivCasa = "Algebra",
                            Opis = "Osnove algebre"
                        },
                        new
                        {
                            CasoviID = 27,
                            GodisnjiPlanProgramID = 6,
                            IsOdrzan = false,
                            NazivCasa = "Geometrija",
                            Opis = "Osnove geometrije"
                        },
                        new
                        {
                            CasoviID = 28,
                            GodisnjiPlanProgramID = 6,
                            IsOdrzan = false,
                            NazivCasa = "Trigonometrija",
                            Opis = "Osnove trigonometrije"
                        },
                        new
                        {
                            CasoviID = 29,
                            GodisnjiPlanProgramID = 6,
                            IsOdrzan = false,
                            NazivCasa = "Kalkulus",
                            Opis = "Osnove kalkulusa"
                        },
                        new
                        {
                            CasoviID = 30,
                            GodisnjiPlanProgramID = 6,
                            IsOdrzan = false,
                            NazivCasa = "Statistika",
                            Opis = "Osnove statistike"
                        },
                        new
                        {
                            CasoviID = 31,
                            GodisnjiPlanProgramID = 7,
                            IsOdrzan = false,
                            NazivCasa = "Mehanika",
                            Opis = "Osnove mehanike"
                        },
                        new
                        {
                            CasoviID = 32,
                            GodisnjiPlanProgramID = 7,
                            IsOdrzan = false,
                            NazivCasa = "Termodinamika",
                            Opis = "Osnove termodinamike"
                        },
                        new
                        {
                            CasoviID = 33,
                            GodisnjiPlanProgramID = 7,
                            IsOdrzan = false,
                            NazivCasa = "Optika",
                            Opis = "Osnove optike"
                        },
                        new
                        {
                            CasoviID = 34,
                            GodisnjiPlanProgramID = 7,
                            IsOdrzan = false,
                            NazivCasa = "Elektricitet",
                            Opis = "Osnove elektriciteta"
                        },
                        new
                        {
                            CasoviID = 35,
                            GodisnjiPlanProgramID = 7,
                            IsOdrzan = false,
                            NazivCasa = "Magnetizam",
                            Opis = "Osnove magnetizma"
                        },
                        new
                        {
                            CasoviID = 36,
                            GodisnjiPlanProgramID = 8,
                            IsOdrzan = false,
                            NazivCasa = "Organska hemija",
                            Opis = "Osnove organske hemije"
                        },
                        new
                        {
                            CasoviID = 37,
                            GodisnjiPlanProgramID = 8,
                            IsOdrzan = false,
                            NazivCasa = "Neorganska hemija",
                            Opis = "Osnove neorganske hemije"
                        },
                        new
                        {
                            CasoviID = 38,
                            GodisnjiPlanProgramID = 8,
                            IsOdrzan = false,
                            NazivCasa = "Fizička hemija",
                            Opis = "Osnove fizičke hemije"
                        },
                        new
                        {
                            CasoviID = 39,
                            GodisnjiPlanProgramID = 8,
                            IsOdrzan = false,
                            NazivCasa = "Analitička hemija",
                            Opis = "Osnove analitičke hemije"
                        },
                        new
                        {
                            CasoviID = 40,
                            GodisnjiPlanProgramID = 8,
                            IsOdrzan = false,
                            NazivCasa = "Biohemija",
                            Opis = "Osnove biohemije"
                        },
                        new
                        {
                            CasoviID = 41,
                            GodisnjiPlanProgramID = 9,
                            IsOdrzan = false,
                            NazivCasa = "Osnove programiranja",
                            Opis = "Osnove programiranja"
                        },
                        new
                        {
                            CasoviID = 42,
                            GodisnjiPlanProgramID = 9,
                            IsOdrzan = false,
                            NazivCasa = "Strukture podataka",
                            Opis = "Osnove struktura podataka"
                        },
                        new
                        {
                            CasoviID = 43,
                            GodisnjiPlanProgramID = 9,
                            IsOdrzan = false,
                            NazivCasa = "Algoritmi",
                            Opis = "Osnove algoritama"
                        },
                        new
                        {
                            CasoviID = 44,
                            GodisnjiPlanProgramID = 9,
                            IsOdrzan = false,
                            NazivCasa = "Baze podataka",
                            Opis = "Osnove baza podataka"
                        },
                        new
                        {
                            CasoviID = 45,
                            GodisnjiPlanProgramID = 9,
                            IsOdrzan = false,
                            NazivCasa = "Softverski inženjering",
                            Opis = "Osnove softverskog inženjeringa"
                        },
                        new
                        {
                            CasoviID = 46,
                            GodisnjiPlanProgramID = 10,
                            IsOdrzan = false,
                            NazivCasa = "Gramatika",
                            Opis = "Osnove engleske gramatike"
                        },
                        new
                        {
                            CasoviID = 47,
                            GodisnjiPlanProgramID = 10,
                            IsOdrzan = false,
                            NazivCasa = "Vokabular",
                            Opis = "Osnove engleskog vokabulara"
                        },
                        new
                        {
                            CasoviID = 48,
                            GodisnjiPlanProgramID = 10,
                            IsOdrzan = false,
                            NazivCasa = "Razumijevanje pročitanog",
                            Opis = "Razumijevanje pročitanog"
                        },
                        new
                        {
                            CasoviID = 49,
                            GodisnjiPlanProgramID = 10,
                            IsOdrzan = false,
                            NazivCasa = "Pisanje",
                            Opis = "Pisanje na engleskom"
                        },
                        new
                        {
                            CasoviID = 50,
                            GodisnjiPlanProgramID = 10,
                            IsOdrzan = false,
                            NazivCasa = "Govorne vještine",
                            Opis = "Govorne vještine na engleskom"
                        });
                });

            modelBuilder.Entity("eDnevnik.Services.Database.CasoviUcenici", b =>
                {
                    b.Property<int>("CasoviUceniciID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CasoviUceniciID"), 1L, 1);

                    b.Property<int>("CasoviID")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrisutan")
                        .HasColumnType("bit");

                    b.Property<int>("UcenikID")
                        .HasColumnType("int");

                    b.Property<bool>("zakljucan")
                        .HasColumnType("bit");

                    b.HasKey("CasoviUceniciID");

                    b.HasIndex("CasoviID");

                    b.HasIndex("UcenikID");

                    b.ToTable("CasoviUcenici");
                });

            modelBuilder.Entity("eDnevnik.Services.Database.Dogadjaji", b =>
                {
                    b.Property<int>("DogadjajId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DogadjajId"), 1L, 1);

                    b.Property<DateTime>("DatumDogadjaja")
                        .HasColumnType("datetime2");

                    b.Property<string>("NazivDogadjaja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpisDogadjaja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SkolaID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("StateMachine")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DogadjajId");

                    b.HasIndex("SkolaID");

                    b.ToTable("Dogadjaji");
                });

            modelBuilder.Entity("eDnevnik.Services.Database.GodisnjiPlanProgram", b =>
                {
                    b.Property<int>("GodisnjiPlanProgramID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GodisnjiPlanProgramID"), 1L, 1);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OdjeljenjeID")
                        .HasColumnType("int");

                    b.Property<int>("PredmetID")
                        .HasColumnType("int");

                    b.Property<int?>("ProfesorID")
                        .HasColumnType("int");

                    b.Property<int?>("SkolaID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("brojCasova")
                        .HasColumnType("int");

                    b.HasKey("GodisnjiPlanProgramID");

                    b.HasIndex("OdjeljenjeID");

                    b.HasIndex("PredmetID");

                    b.HasIndex("SkolaID");

                    b.ToTable("GodisnjiPlanProgram");

                    b.HasData(
                        new
                        {
                            GodisnjiPlanProgramID = 1,
                            Naziv = "Matematika Plan - 1A",
                            OdjeljenjeID = 1,
                            PredmetID = 1,
                            SkolaID = 1,
                            brojCasova = 5
                        },
                        new
                        {
                            GodisnjiPlanProgramID = 2,
                            Naziv = "Fizika Plan - 1A",
                            OdjeljenjeID = 1,
                            PredmetID = 3,
                            SkolaID = 1,
                            brojCasova = 5
                        },
                        new
                        {
                            GodisnjiPlanProgramID = 3,
                            Naziv = "Hemija Plan - 1A",
                            OdjeljenjeID = 1,
                            PredmetID = 5,
                            SkolaID = 1,
                            brojCasova = 5
                        },
                        new
                        {
                            GodisnjiPlanProgramID = 4,
                            Naziv = "Informatika Plan - 1A",
                            OdjeljenjeID = 1,
                            PredmetID = 7,
                            SkolaID = 1,
                            brojCasova = 5
                        },
                        new
                        {
                            GodisnjiPlanProgramID = 5,
                            Naziv = "Engleski Plan - 1A",
                            OdjeljenjeID = 1,
                            PredmetID = 9,
                            SkolaID = 1,
                            brojCasova = 5
                        },
                        new
                        {
                            GodisnjiPlanProgramID = 6,
                            Naziv = "Matematika Plan - 2A",
                            OdjeljenjeID = 2,
                            PredmetID = 1,
                            SkolaID = 1,
                            brojCasova = 5
                        },
                        new
                        {
                            GodisnjiPlanProgramID = 7,
                            Naziv = "Fizika Plan - 2A",
                            OdjeljenjeID = 2,
                            PredmetID = 3,
                            SkolaID = 1,
                            brojCasova = 5
                        },
                        new
                        {
                            GodisnjiPlanProgramID = 8,
                            Naziv = "Hemija Plan - 2A",
                            OdjeljenjeID = 2,
                            PredmetID = 5,
                            SkolaID = 1,
                            brojCasova = 5
                        },
                        new
                        {
                            GodisnjiPlanProgramID = 9,
                            Naziv = "Informatika Plan - 2A",
                            OdjeljenjeID = 2,
                            PredmetID = 7,
                            SkolaID = 1,
                            brojCasova = 5
                        },
                        new
                        {
                            GodisnjiPlanProgramID = 10,
                            Naziv = "Engleski Plan - 2A",
                            OdjeljenjeID = 2,
                            PredmetID = 9,
                            SkolaID = 1,
                            brojCasova = 5
                        },
                        new
                        {
                            GodisnjiPlanProgramID = 11,
                            Naziv = "Biologija Plan - 1A",
                            OdjeljenjeID = 3,
                            PredmetID = 2,
                            SkolaID = 2,
                            brojCasova = 5
                        },
                        new
                        {
                            GodisnjiPlanProgramID = 12,
                            Naziv = "Fizika Plan - 1A",
                            OdjeljenjeID = 3,
                            PredmetID = 4,
                            SkolaID = 2,
                            brojCasova = 5
                        },
                        new
                        {
                            GodisnjiPlanProgramID = 13,
                            Naziv = "Hemija Plan - 1A",
                            OdjeljenjeID = 3,
                            PredmetID = 6,
                            SkolaID = 2,
                            brojCasova = 5
                        },
                        new
                        {
                            GodisnjiPlanProgramID = 14,
                            Naziv = "Informatika Plan - 1A",
                            OdjeljenjeID = 3,
                            PredmetID = 8,
                            SkolaID = 2,
                            brojCasova = 5
                        },
                        new
                        {
                            GodisnjiPlanProgramID = 15,
                            Naziv = "Elektrotehnika Plan - 1A",
                            OdjeljenjeID = 3,
                            PredmetID = 10,
                            SkolaID = 2,
                            brojCasova = 5
                        });
                });

            modelBuilder.Entity("eDnevnik.Services.Database.KorisniciUloge", b =>
                {
                    b.Property<int>("KorisnikUlogaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikUlogaID"), 1L, 1);

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<int>("UlogaID")
                        .HasColumnType("int");

                    b.HasKey("KorisnikUlogaID");

                    b.HasIndex("KorisnikID");

                    b.HasIndex("UlogaID");

                    b.ToTable("korisniciUloges");

                    b.HasData(
                        new
                        {
                            KorisnikUlogaID = 1,
                            DatumIzmjene = new DateTime(2024, 10, 1, 19, 39, 2, 71, DateTimeKind.Local).AddTicks(3157),
                            KorisnikID = 1,
                            UlogaID = 1
                        },
                        new
                        {
                            KorisnikUlogaID = 2,
                            DatumIzmjene = new DateTime(2024, 10, 1, 19, 39, 2, 71, DateTimeKind.Local).AddTicks(3205),
                            KorisnikID = 2,
                            UlogaID = 2
                        },
                        new
                        {
                            KorisnikUlogaID = 3,
                            DatumIzmjene = new DateTime(2024, 10, 1, 19, 39, 2, 71, DateTimeKind.Local).AddTicks(3208),
                            KorisnikID = 3,
                            UlogaID = 2
                        },
                        new
                        {
                            KorisnikUlogaID = 4,
                            DatumIzmjene = new DateTime(2024, 10, 1, 19, 39, 2, 71, DateTimeKind.Local).AddTicks(3211),
                            KorisnikID = 4,
                            UlogaID = 1
                        },
                        new
                        {
                            KorisnikUlogaID = 5,
                            DatumIzmjene = new DateTime(2024, 10, 1, 19, 39, 2, 71, DateTimeKind.Local).AddTicks(3213),
                            KorisnikID = 5,
                            UlogaID = 1
                        },
                        new
                        {
                            KorisnikUlogaID = 6,
                            DatumIzmjene = new DateTime(2024, 10, 1, 19, 39, 2, 71, DateTimeKind.Local).AddTicks(3216),
                            KorisnikID = 6,
                            UlogaID = 2
                        },
                        new
                        {
                            KorisnikUlogaID = 7,
                            DatumIzmjene = new DateTime(2024, 10, 1, 19, 39, 2, 71, DateTimeKind.Local).AddTicks(3218),
                            KorisnikID = 7,
                            UlogaID = 2
                        },
                        new
                        {
                            KorisnikUlogaID = 8,
                            DatumIzmjene = new DateTime(2024, 10, 1, 19, 39, 2, 71, DateTimeKind.Local).AddTicks(3221),
                            KorisnikID = 8,
                            UlogaID = 2
                        },
                        new
                        {
                            KorisnikUlogaID = 9,
                            DatumIzmjene = new DateTime(2024, 10, 1, 19, 39, 2, 71, DateTimeKind.Local).AddTicks(3223),
                            KorisnikID = 9,
                            UlogaID = 2
                        },
                        new
                        {
                            KorisnikUlogaID = 10,
                            DatumIzmjene = new DateTime(2024, 10, 1, 19, 39, 2, 71, DateTimeKind.Local).AddTicks(3226),
                            KorisnikID = 10,
                            UlogaID = 2
                        },
                        new
                        {
                            KorisnikUlogaID = 11,
                            DatumIzmjene = new DateTime(2024, 10, 1, 19, 39, 2, 71, DateTimeKind.Local).AddTicks(3228),
                            KorisnikID = 11,
                            UlogaID = 2
                        },
                        new
                        {
                            KorisnikUlogaID = 12,
                            DatumIzmjene = new DateTime(2024, 10, 1, 19, 39, 2, 71, DateTimeKind.Local).AddTicks(3231),
                            KorisnikID = 12,
                            UlogaID = 2
                        },
                        new
                        {
                            KorisnikUlogaID = 13,
                            DatumIzmjene = new DateTime(2024, 10, 1, 19, 39, 2, 71, DateTimeKind.Local).AddTicks(3233),
                            KorisnikID = 13,
                            UlogaID = 2
                        },
                        new
                        {
                            KorisnikUlogaID = 14,
                            DatumIzmjene = new DateTime(2024, 10, 1, 19, 39, 2, 71, DateTimeKind.Local).AddTicks(3236),
                            KorisnikID = 14,
                            UlogaID = 2
                        },
                        new
                        {
                            KorisnikUlogaID = 15,
                            DatumIzmjene = new DateTime(2024, 10, 1, 19, 39, 2, 71, DateTimeKind.Local).AddTicks(3238),
                            KorisnikID = 15,
                            UlogaID = 2
                        },
                        new
                        {
                            KorisnikUlogaID = 16,
                            DatumIzmjene = new DateTime(2024, 10, 1, 19, 39, 2, 71, DateTimeKind.Local).AddTicks(3241),
                            KorisnikID = 16,
                            UlogaID = 2
                        },
                        new
                        {
                            KorisnikUlogaID = 17,
                            DatumIzmjene = new DateTime(2024, 10, 1, 19, 39, 2, 71, DateTimeKind.Local).AddTicks(3243),
                            KorisnikID = 17,
                            UlogaID = 2
                        },
                        new
                        {
                            KorisnikUlogaID = 18,
                            DatumIzmjene = new DateTime(2024, 10, 1, 19, 39, 2, 71, DateTimeKind.Local).AddTicks(3245),
                            KorisnikID = 18,
                            UlogaID = 2
                        },
                        new
                        {
                            KorisnikUlogaID = 19,
                            DatumIzmjene = new DateTime(2024, 10, 1, 19, 39, 2, 71, DateTimeKind.Local).AddTicks(3248),
                            KorisnikID = 19,
                            UlogaID = 2
                        });
                });

            modelBuilder.Entity("eDnevnik.Services.Database.Korisnik", b =>
                {
                    b.Property<int>("KorisnikID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikID"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OdjeljenjeID")
                        .HasColumnType("int");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateMachine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Telefon")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KorisnikID");

                    b.HasIndex("OdjeljenjeID");

                    b.ToTable("Korisnici");

                    b.HasData(
                        new
                        {
                            KorisnikID = 1,
                            Email = "adminadmin@gmail.com",
                            Ime = "admin",
                            KorisnickoIme = "admin",
                            LozinkaHash = "JfJzsL3ngGWki+Dn67C+8WLy73I=",
                            LozinkaSalt = "7TUJfmgkkDvcY3PB/M4fhg==",
                            Prezime = "admin",
                            Telefon = "060000000"
                        },
                        new
                        {
                            KorisnikID = 2,
                            Email = "ucenik@gmail.com",
                            Ime = "ucenik",
                            KorisnickoIme = "ucenik",
                            LozinkaHash = "Tyitt2sn+I+DQuydy0SzIv8Olio=",
                            LozinkaSalt = "iM34ef0JCEUAzA7lkWld9w==",
                            Prezime = "ucenik",
                            Telefon = "+38700000000"
                        },
                        new
                        {
                            KorisnikID = 3,
                            Email = "roditelj@gmail.com",
                            Ime = "roditelj",
                            KorisnickoIme = "roditelj",
                            LozinkaHash = "Tyitt2sn+I+DQuydy0SzIv8Olio=",
                            LozinkaSalt = "iM34ef0JCEUAzA7lkWld9w==",
                            Prezime = "roditelj",
                            Telefon = "+38700000000"
                        },
                        new
                        {
                            KorisnikID = 4,
                            Email = "denismusic@gmail.com",
                            Ime = "Denis",
                            KorisnickoIme = "denis",
                            LozinkaHash = "JfJzsL3ngGWki+Dn67C+8WLy73I=",
                            LozinkaSalt = "7TUJfmgkkDvcY3PB/M4fhg==",
                            Prezime = "Music",
                            Telefon = "060300400"
                        },
                        new
                        {
                            KorisnikID = 5,
                            Email = "student1@gmail.com",
                            Ime = "Amar",
                            KorisnickoIme = "student1",
                            LozinkaHash = "Tyitt2sn+I+DQuydy0SzIv8Olio=",
                            LozinkaSalt = "iM34ef0JCEUAzA7lkWld9w==",
                            OdjeljenjeID = 1,
                            Prezime = "Alić",
                            Telefon = "+38700000001"
                        },
                        new
                        {
                            KorisnikID = 6,
                            Email = "student2@gmail.com",
                            Ime = "Almir",
                            KorisnickoIme = "student2",
                            LozinkaHash = "Tyitt2sn+I+DQuydy0SzIv8Olio=",
                            LozinkaSalt = "iM34ef0JCEUAzA7lkWld9w==",
                            OdjeljenjeID = 1,
                            Prezime = "Gogolo",
                            Telefon = "+38700000002"
                        },
                        new
                        {
                            KorisnikID = 7,
                            Email = "student3@gmail.com",
                            Ime = "Sefer",
                            KorisnickoIme = "student3",
                            LozinkaHash = "Tyitt2sn+I+DQuydy0SzIv8Olio=",
                            LozinkaSalt = "iM34ef0JCEUAzA7lkWld9w==",
                            OdjeljenjeID = 1,
                            Prezime = "Seferović",
                            Telefon = "+38700000003"
                        },
                        new
                        {
                            KorisnikID = 8,
                            Email = "student4@gmail.com",
                            Ime = "Sinan",
                            KorisnickoIme = "student4",
                            LozinkaHash = "Tyitt2sn+I+DQuydy0SzIv8Olio=",
                            LozinkaSalt = "iM34ef0JCEUAzA7lkWld9w==",
                            OdjeljenjeID = 1,
                            Prezime = "Ahmedovski",
                            Telefon = "+38700000004"
                        },
                        new
                        {
                            KorisnikID = 9,
                            Email = "student5@gmail.com",
                            Ime = "Iman",
                            KorisnickoIme = "student5",
                            LozinkaHash = "Tyitt2sn+I+DQuydy0SzIv8Olio=",
                            LozinkaSalt = "iM34ef0JCEUAzA7lkWld9w==",
                            OdjeljenjeID = 1,
                            Prezime = "Gosto",
                            Telefon = "+38700000005"
                        },
                        new
                        {
                            KorisnikID = 10,
                            Email = "student6@gmail.com",
                            Ime = "Imad",
                            KorisnickoIme = "student6",
                            LozinkaHash = "Tyitt2sn+I+DQuydy0SzIv8Olio=",
                            LozinkaSalt = "iM34ef0JCEUAzA7lkWld9w==",
                            OdjeljenjeID = 1,
                            Prezime = "Alić",
                            Telefon = "+38700000006"
                        },
                        new
                        {
                            KorisnikID = 11,
                            Email = "student7@gmail.com",
                            Ime = "Benaid",
                            KorisnickoIme = "student7",
                            LozinkaHash = "Tyitt2sn+I+DQuydy0SzIv8Olio=",
                            LozinkaSalt = "iM34ef0JCEUAzA7lkWld9w==",
                            OdjeljenjeID = 1,
                            Prezime = "Ahmetović",
                            Telefon = "+38700000007"
                        },
                        new
                        {
                            KorisnikID = 12,
                            Email = "student8@gmail.com",
                            Ime = "Azer",
                            KorisnickoIme = "student8",
                            LozinkaHash = "Tyitt2sn+I+DQuydy0SzIv8Olio=",
                            LozinkaSalt = "iM34ef0JCEUAzA7lkWld9w==",
                            OdjeljenjeID = 1,
                            Prezime = "Sultanović",
                            Telefon = "+38700000008"
                        },
                        new
                        {
                            KorisnikID = 13,
                            Email = "student9@gmail.com",
                            Ime = "Goran",
                            KorisnickoIme = "student9",
                            LozinkaHash = "Tyitt2sn+I+DQuydy0SzIv8Olio=",
                            LozinkaSalt = "iM34ef0JCEUAzA7lkWld9w==",
                            OdjeljenjeID = 1,
                            Prezime = "Škondrić",
                            Telefon = "+38700000009"
                        },
                        new
                        {
                            KorisnikID = 14,
                            Email = "student10@gmail.com",
                            Ime = "Emina",
                            KorisnickoIme = "student10",
                            LozinkaHash = "Tyitt2sn+I+DQuydy0SzIv8Olio=",
                            LozinkaSalt = "iM34ef0JCEUAzA7lkWld9w==",
                            OdjeljenjeID = 2,
                            Prezime = "Junuz",
                            Telefon = "+38700000010"
                        },
                        new
                        {
                            KorisnikID = 15,
                            Email = "student11@gmail.com",
                            Ime = "Amel",
                            KorisnickoIme = "student11",
                            LozinkaHash = "Tyitt2sn+I+DQuydy0SzIv8Olio=",
                            LozinkaSalt = "iM34ef0JCEUAzA7lkWld9w==",
                            OdjeljenjeID = 2,
                            Prezime = "Musić",
                            Telefon = "+38700000011"
                        },
                        new
                        {
                            KorisnikID = 16,
                            Email = "student12@gmail.com",
                            Ime = "Dragi",
                            KorisnickoIme = "student12",
                            LozinkaHash = "Tyitt2sn+I+DQuydy0SzIv8Olio=",
                            LozinkaSalt = "iM34ef0JCEUAzA7lkWld9w==",
                            OdjeljenjeID = 2,
                            Prezime = "Tiro",
                            Telefon = "+38700000012"
                        },
                        new
                        {
                            KorisnikID = 17,
                            Email = "student13@gmail.com",
                            Ime = "Adil",
                            KorisnickoIme = "student13",
                            LozinkaHash = "Tyitt2sn+I+DQuydy0SzIv8Olio=",
                            LozinkaSalt = "iM34ef0JCEUAzA7lkWld9w==",
                            OdjeljenjeID = 2,
                            Prezime = "Joldić",
                            Telefon = "+38700000013"
                        },
                        new
                        {
                            KorisnikID = 18,
                            Email = "student14@gmail.com",
                            Ime = "Lejla",
                            KorisnickoIme = "student14",
                            LozinkaHash = "Tyitt2sn+I+DQuydy0SzIv8Olio=",
                            LozinkaSalt = "iM34ef0JCEUAzA7lkWld9w==",
                            OdjeljenjeID = 2,
                            Prezime = "Jazvin",
                            Telefon = "+38700000014"
                        },
                        new
                        {
                            KorisnikID = 19,
                            Email = "student15@gmail.com",
                            Ime = "Elmir",
                            KorisnickoIme = "student15",
                            LozinkaHash = "Tyitt2sn+I+DQuydy0SzIv8Olio=",
                            LozinkaSalt = "iM34ef0JCEUAzA7lkWld9w==",
                            OdjeljenjeID = 2,
                            Prezime = "Babović",
                            Telefon = "+38700000015"
                        });
                });

            modelBuilder.Entity("eDnevnik.Services.Database.KorisnikDogadjaj", b =>
                {
                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<int>("DogadjajId")
                        .HasColumnType("int");

                    b.HasKey("KorisnikID", "DogadjajId");

                    b.HasIndex("DogadjajId");

                    b.ToTable("KorisnikDogadjaj");
                });

            modelBuilder.Entity("eDnevnik.Services.Database.Ocjene", b =>
                {
                    b.Property<int>("OcjenaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OcjenaID"), 1L, 1);

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<int>("PredmetID")
                        .HasColumnType("int");

                    b.Property<int>("VrijednostOcjene")
                        .HasColumnType("int");

                    b.HasKey("OcjenaID");

                    b.HasIndex("KorisnikID");

                    b.HasIndex("PredmetID");

                    b.ToTable("Ocjene");

                    b.HasData(
                        new
                        {
                            OcjenaID = 1,
                            Datum = new DateTime(2024, 10, 1, 19, 39, 2, 71, DateTimeKind.Local).AddTicks(3311),
                            KorisnikID = 2,
                            PredmetID = 1,
                            VrijednostOcjene = 5
                        },
                        new
                        {
                            OcjenaID = 2,
                            Datum = new DateTime(2024, 10, 1, 19, 39, 2, 71, DateTimeKind.Local).AddTicks(3315),
                            KorisnikID = 2,
                            PredmetID = 2,
                            VrijednostOcjene = 4
                        });
                });

            modelBuilder.Entity("eDnevnik.Services.Database.Odjeljenje", b =>
                {
                    b.Property<int>("OdjeljenjeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OdjeljenjeID"), 1L, 1);

                    b.Property<string>("NazivOdjeljenja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RazrednikID")
                        .HasColumnType("int");

                    b.Property<int?>("SkolaID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("OdjeljenjeID");

                    b.HasIndex("RazrednikID")
                        .IsUnique()
                        .HasFilter("[RazrednikID] IS NOT NULL");

                    b.HasIndex("SkolaID");

                    b.ToTable("Odjeljenje");

                    b.HasData(
                        new
                        {
                            OdjeljenjeID = 1,
                            NazivOdjeljenja = "1A",
                            RazrednikID = 1,
                            SkolaID = 1
                        },
                        new
                        {
                            OdjeljenjeID = 2,
                            NazivOdjeljenja = "2A",
                            RazrednikID = 4,
                            SkolaID = 1
                        },
                        new
                        {
                            OdjeljenjeID = 3,
                            NazivOdjeljenja = "1A",
                            RazrednikID = 5,
                            SkolaID = 2
                        });
                });

            modelBuilder.Entity("eDnevnik.Services.Database.OdjeljenjePredmet", b =>
                {
                    b.Property<int>("OdjeljenjePredmetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OdjeljenjePredmetID"), 1L, 1);

                    b.Property<int>("OdjeljenjeID")
                        .HasColumnType("int");

                    b.Property<int>("PredmetID")
                        .HasColumnType("int");

                    b.HasKey("OdjeljenjePredmetID");

                    b.HasIndex("OdjeljenjeID");

                    b.HasIndex("PredmetID");

                    b.ToTable("OdjeljenjePredmet");
                });

            modelBuilder.Entity("eDnevnik.Services.Database.Poruke", b =>
                {
                    b.Property<int>("PorukaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PorukaID"), 1L, 1);

                    b.Property<DateTime>("DatumSlanja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Odgovor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfesorID")
                        .HasColumnType("int");

                    b.Property<string>("SadrzajPoruke")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UcenikID")
                        .HasColumnType("int");

                    b.HasKey("PorukaID");

                    b.HasIndex("ProfesorID");

                    b.HasIndex("UcenikID");

                    b.ToTable("Poruke");
                });

            modelBuilder.Entity("eDnevnik.Services.Database.Predmet", b =>
                {
                    b.Property<int>("PredmetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PredmetID"), 1L, 1);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SkolaID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("StateMachine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ZakljucnaOcjena")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PredmetID");

                    b.HasIndex("SkolaID");

                    b.ToTable("Predmeti");

                    b.HasData(
                        new
                        {
                            PredmetID = 1,
                            Naziv = "Matematika",
                            Opis = "Sabiranje, oduzimanje, množenje, dijeljenje",
                            SkolaID = 1,
                            StateMachine = "draft"
                        },
                        new
                        {
                            PredmetID = 3,
                            Naziv = "Fizika",
                            Opis = "Osnovne fizikalne pojave i zakoni",
                            SkolaID = 1,
                            StateMachine = "draft"
                        },
                        new
                        {
                            PredmetID = 5,
                            Naziv = "Hemija",
                            Opis = "Osnovni hemijski spojevi i reakcije",
                            SkolaID = 1,
                            StateMachine = "draft"
                        },
                        new
                        {
                            PredmetID = 7,
                            Naziv = "Informatika",
                            Opis = "Osnove programiranja i računarskih sistema",
                            SkolaID = 1,
                            StateMachine = "draft"
                        },
                        new
                        {
                            PredmetID = 9,
                            Naziv = "Engleski",
                            Opis = "Osnove engleskog jezika i komunikacije",
                            SkolaID = 1,
                            StateMachine = "draft"
                        },
                        new
                        {
                            PredmetID = 2,
                            Naziv = "Biologija",
                            Opis = "Biljke i životne procese",
                            SkolaID = 2,
                            StateMachine = "draft"
                        },
                        new
                        {
                            PredmetID = 4,
                            Naziv = "Fizika",
                            Opis = "Tehnička primjena fizikalnih zakona",
                            SkolaID = 2,
                            StateMachine = "draft"
                        },
                        new
                        {
                            PredmetID = 6,
                            Naziv = "Hemija",
                            Opis = "Hemijski procesi u tehnologiji",
                            SkolaID = 2,
                            StateMachine = "draft"
                        },
                        new
                        {
                            PredmetID = 8,
                            Naziv = "Informatika",
                            Opis = "Napredno programiranje i sistemi",
                            SkolaID = 2,
                            StateMachine = "draft"
                        },
                        new
                        {
                            PredmetID = 10,
                            Naziv = "Elektrotehnika",
                            Opis = "Osnove elektrotehnike i elektronike",
                            SkolaID = 2,
                            StateMachine = "draft"
                        });
                });

            modelBuilder.Entity("eDnevnik.Services.Database.Skola", b =>
                {
                    b.Property<int>("SkolaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkolaID"), 1L, 1);

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Drzava")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkolaID");

                    b.ToTable("Skola");

                    b.HasData(
                        new
                        {
                            SkolaID = 1,
                            Adresa = "Sjeverni logor bb",
                            Drzava = "BiH",
                            Grad = "Mostar",
                            Naziv = "Srednja Stručna Škola"
                        },
                        new
                        {
                            SkolaID = 2,
                            Adresa = "Trg Ivana Krndelja bb",
                            Drzava = "BiH",
                            Grad = "Mostar",
                            Naziv = "Srednja Tehnička Škola"
                        });
                });

            modelBuilder.Entity("eDnevnik.Services.Database.Uloge", b =>
                {
                    b.Property<int>("UlogaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UlogaID"), 1L, 1);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UlogaID");

                    b.ToTable("Uloge");

                    b.HasData(
                        new
                        {
                            UlogaID = 1,
                            Naziv = "admin",
                            Opis = "admin/profesor"
                        },
                        new
                        {
                            UlogaID = 2,
                            Naziv = "učenik",
                            Opis = "učenik/roditelj"
                        });
                });

            modelBuilder.Entity("eDnevnik.Services.Database.Casovi", b =>
                {
                    b.HasOne("eDnevnik.Services.Database.GodisnjiPlanProgram", "GodisnjiPlanProgram")
                        .WithMany("Casovi")
                        .HasForeignKey("GodisnjiPlanProgramID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GodisnjiPlanProgram");
                });

            modelBuilder.Entity("eDnevnik.Services.Database.CasoviUcenici", b =>
                {
                    b.HasOne("eDnevnik.Services.Database.Casovi", "Casovi")
                        .WithMany("CasoviUcenici")
                        .HasForeignKey("CasoviID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eDnevnik.Services.Database.Korisnik", "Ucenik")
                        .WithMany()
                        .HasForeignKey("UcenikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Casovi");

                    b.Navigation("Ucenik");
                });

            modelBuilder.Entity("eDnevnik.Services.Database.Dogadjaji", b =>
                {
                    b.HasOne("eDnevnik.Services.Database.Skola", "Skola")
                        .WithMany("Dogadjaji")
                        .HasForeignKey("SkolaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Skola");
                });

            modelBuilder.Entity("eDnevnik.Services.Database.GodisnjiPlanProgram", b =>
                {
                    b.HasOne("eDnevnik.Services.Database.Odjeljenje", "Odjeljenje")
                        .WithMany()
                        .HasForeignKey("OdjeljenjeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eDnevnik.Services.Database.Predmet", "Predmet")
                        .WithMany()
                        .HasForeignKey("PredmetID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eDnevnik.Services.Database.Skola", "Skola")
                        .WithMany("GodisnjiPlanProgrami")
                        .HasForeignKey("SkolaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Odjeljenje");

                    b.Navigation("Predmet");

                    b.Navigation("Skola");
                });

            modelBuilder.Entity("eDnevnik.Services.Database.KorisniciUloge", b =>
                {
                    b.HasOne("eDnevnik.Services.Database.Korisnik", "Korisnik")
                        .WithMany("KorisniciUloge")
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eDnevnik.Services.Database.Uloge", "Uloga")
                        .WithMany("KorisniciUloge")
                        .HasForeignKey("UlogaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("eDnevnik.Services.Database.Korisnik", b =>
                {
                    b.HasOne("eDnevnik.Services.Database.Odjeljenje", null)
                        .WithMany("Ucenici")
                        .HasForeignKey("OdjeljenjeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("eDnevnik.Services.Database.KorisnikDogadjaj", b =>
                {
                    b.HasOne("eDnevnik.Services.Database.Dogadjaji", "Dogadjaj")
                        .WithMany("KorisniciDogadjaji")
                        .HasForeignKey("DogadjajId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eDnevnik.Services.Database.Korisnik", "Korisnik")
                        .WithMany("KorisniciDogadjaji")
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dogadjaj");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eDnevnik.Services.Database.Ocjene", b =>
                {
                    b.HasOne("eDnevnik.Services.Database.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eDnevnik.Services.Database.Predmet", "Predmet")
                        .WithMany("Ocjene")
                        .HasForeignKey("PredmetID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Predmet");
                });

            modelBuilder.Entity("eDnevnik.Services.Database.Odjeljenje", b =>
                {
                    b.HasOne("eDnevnik.Services.Database.Korisnik", "Razrednik")
                        .WithOne("Odjeljenje")
                        .HasForeignKey("eDnevnik.Services.Database.Odjeljenje", "RazrednikID");

                    b.HasOne("eDnevnik.Services.Database.Skola", "Skola")
                        .WithMany("Odjeljenja")
                        .HasForeignKey("SkolaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Razrednik");

                    b.Navigation("Skola");
                });

            modelBuilder.Entity("eDnevnik.Services.Database.OdjeljenjePredmet", b =>
                {
                    b.HasOne("eDnevnik.Services.Database.Odjeljenje", "Odjeljenje")
                        .WithMany("OdjeljenjePredmeti")
                        .HasForeignKey("OdjeljenjeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eDnevnik.Services.Database.Predmet", "Predmet")
                        .WithMany("OdjeljenjePredmeti")
                        .HasForeignKey("PredmetID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Odjeljenje");

                    b.Navigation("Predmet");
                });

            modelBuilder.Entity("eDnevnik.Services.Database.Poruke", b =>
                {
                    b.HasOne("eDnevnik.Services.Database.Korisnik", "Profesor")
                        .WithMany()
                        .HasForeignKey("ProfesorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eDnevnik.Services.Database.Korisnik", "Ucenik")
                        .WithMany()
                        .HasForeignKey("UcenikID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profesor");

                    b.Navigation("Ucenik");
                });

            modelBuilder.Entity("eDnevnik.Services.Database.Predmet", b =>
                {
                    b.HasOne("eDnevnik.Services.Database.Skola", "Skola")
                        .WithMany("Predmeti")
                        .HasForeignKey("SkolaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Skola");
                });

            modelBuilder.Entity("eDnevnik.Services.Database.Casovi", b =>
                {
                    b.Navigation("CasoviUcenici");
                });

            modelBuilder.Entity("eDnevnik.Services.Database.Dogadjaji", b =>
                {
                    b.Navigation("KorisniciDogadjaji");
                });

            modelBuilder.Entity("eDnevnik.Services.Database.GodisnjiPlanProgram", b =>
                {
                    b.Navigation("Casovi");
                });

            modelBuilder.Entity("eDnevnik.Services.Database.Korisnik", b =>
                {
                    b.Navigation("KorisniciDogadjaji");

                    b.Navigation("KorisniciUloge");

                    b.Navigation("Odjeljenje")
                        .IsRequired();
                });

            modelBuilder.Entity("eDnevnik.Services.Database.Odjeljenje", b =>
                {
                    b.Navigation("OdjeljenjePredmeti");

                    b.Navigation("Ucenici");
                });

            modelBuilder.Entity("eDnevnik.Services.Database.Predmet", b =>
                {
                    b.Navigation("Ocjene");

                    b.Navigation("OdjeljenjePredmeti");
                });

            modelBuilder.Entity("eDnevnik.Services.Database.Skola", b =>
                {
                    b.Navigation("Dogadjaji");

                    b.Navigation("GodisnjiPlanProgrami");

                    b.Navigation("Odjeljenja");

                    b.Navigation("Predmeti");
                });

            modelBuilder.Entity("eDnevnik.Services.Database.Uloge", b =>
                {
                    b.Navigation("KorisniciUloge");
                });
#pragma warning restore 612, 618
        }
    }
}
